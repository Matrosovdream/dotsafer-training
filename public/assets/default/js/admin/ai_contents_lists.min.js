/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*************************************************!*\
  !*** ./resources/js/admin/ai_contents_lists.js ***!
  \*************************************************/
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
(function ($) {
  "use strict";

  $('body').on('click', '.js-view-content', function (e) {
    var _$parent$find$val;
    e.preventDefault();
    var $parent = $(this).parent();
    var prompt = (_$parent$find$val = $parent.find('.js-prompt').val()) !== null && _$parent$find$val !== void 0 ? _$parent$find$val : null;
    var result = $parent.find('.js-result').val();
    var $modal = $('#contentModal');
    var $prompt = $modal.find('.js-prompt-card');
    $prompt.addClass('d-none');
    if (prompt && prompt !== '') {
      $prompt.removeClass('d-none');
      $prompt.find('p').text(prompt);
    }
    var $textCard = $modal.find('#generatedTextContents');
    var $imageCard = $modal.find('.js-image-generated-modal');
    $textCard.addClass('d-none');
    $imageCard.addClass('d-none');
    var $imageCardContent = $imageCard.find('.js-content-modal');
    $imageCardContent.html('');
    if (result) {
      result = JSON.parse(result);
      if (result.contents && Object.keys(result.contents).length) {
        $textCard.removeClass('d-none');
        var _iterator = _createForOfIteratorHelper(result.contents),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var content = _step.value;
            var html = makeTextContentHtml(content);
            $textCard.append(html);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (result.images && Object.keys(result.images).length) {
        $imageCard.removeClass('d-none');
        var _iterator2 = _createForOfIteratorHelper(result.images),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var image = _step2.value;
            var _html = "<a href=\"".concat(image, "\" target=\"_blank\" class=\"d-block image-generated-card\">\n                                    <img src=\"").concat(image, "\" alt=\"image\" class=\"img-cover rounded-sm\">\n                                </a>");
            $imageCardContent.append(_html);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }
    $modal.modal('show');
  });
  function makeTextContentHtml(text) {
    return "<div class=\"js-text-generated mt-20 p-15 bg-info-light border-gray300 rounded-sm\">\n            <div class=\"d-flex align-items-center justify-content-between\">\n                <h4 class=\"font-14 text-gray\">".concat(generatedContentLang, "</h4>\n\n                <div class=\"form-group mb-0\">\n                    <button type=\"button\" class=\"btn-transparent d-flex align-items-center js-copy-content-modal\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"").concat(copyLang, "\" data-copy-text=\"").concat(copyLang, "\" data-done-text=\"").concat(doneLang, "\">\n                        <i data-feather=\"copy\" width=\"18\" height=\"18\" class=\"text-gray\"></i>\n                        <span class=\"text-gray font-12 ml-5\">").concat(copyLang, "</span>\n                    </button>\n                </div>\n            </div>\n\n            <div class=\"mt-15 font-14 text-gray js-content\">").concat(text, "</div>\n        </div>");
  }
  var copyTimeout;
  $('body').on('click', '.js-copy-content-modal', function (e) {
    e.preventDefault();
    var $this = $(this);
    var copyText = $this.attr('data-copy-text');
    var doneText = $this.attr('data-done-text');
    var contentToCopy = $this.closest('.js-text-generated').find('.js-content').text();
    var tempTextarea = $('<textarea>').val(contentToCopy).appendTo('body').select();
    document.execCommand('copy');

    // Remove the temporary textarea
    tempTextarea.remove();
    var $span = $this.find('span');
    $span.text(doneText);
    if (copyTimeout) {
      clearTimeout(copyTimeout);
    }
    copyTimeout = setTimeout(function () {
      $span.text(copyText);
    }, 1500);
  });
})(jQuery);
/******/ })()
;